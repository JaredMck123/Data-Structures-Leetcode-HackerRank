/*
  * THIS WAS A HOMEWORK ASSIGNMENT.
  *INSTRUCTIONS WERE AS FOLLOWED:
  In this problem, we will be evaluating simple math expressions that contain numbers, +, *, (, and ).  
  Specifically, you will write a function that takes in a string representing an expression and returns an integer 
  representing its result. The input string will not contain any spaces.  The following are examples of input and
  corresponding output:

  Input:
  3+5

  Output:
  8

  Input:
  3+5*7

  Output:
  38

  Input:
  3*(5*(7+2))

  Output:
  135

The functionality for reading and printing answers is written in the class Main;  your  task  is  to  complete the 
eval() method  which  takes in a string representing an arithmetic expression as described above and outputs a single 
integer representing the result of this expression.  
(Hint: Parentheses are only used in the second half of the test cases.)

You may import stuff from java.util, but that's it. Examples would be Stack, ArrayList, etc.
*/

import java.util.*;

public class Main {
    
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        
        // read input
        String expression = sc.nextLine();
        
        // print the evaluated result
        System.out.println(eval(expression));
    }
    
    public static int eval(String expression) {
    
      Stack<Integer> numbers = new Stack<>();
      Stack<Character> operators = new Stack<>();
      
      for(int i = 0; i < expression.length(); i++) {
        
          char tempchar = expression.charAt(i);
          
          if(tempchar != '(' && tempchar != ')' && tempchar != '+' && tempchar != '*'){
            
            int value = 0;
          
            while (tempchar != '(' && tempchar != ')' && tempchar != '+' && tempchar != '*') {
              
              value = value*10 + (tempchar - '0');
              i++;
              
              if(i < expression.length()){
                
              tempchar = expression.charAt(i);
              
              }
              else{
                
              break;
              
              }
            }
            
          i--;
          numbers.push(value);
          }
          
          else if(tempchar=='('){
            
            operators.push(tempchar);
            
          }
          
          else if(tempchar==')') {
            
            while(operators.peek()!='('){
              
              int output = calculate(numbers, operators);
              numbers.push(output);
              
            }
            
            operators.pop();
            
          }
          else if(tempchar == '+' || tempchar == '*'){
            
          while(!operators.isEmpty() && pemdas(tempchar) < pemdas(operators.peek())){
            
              int output = calculate(numbers, operators);
              numbers.push(output);
              
          }
          
          operators.push(tempchar);
          
          }
      }
      
      
      while(!operators.isEmpty()){
        
        int result = calculate(numbers, operators);
        
        numbers.push(result);
      }
      
      return numbers.pop();
      
      }
      
      public static int calculate(Stack<Integer> numbers, Stack<Character> operators) {
        
          int first = numbers.pop();
          int second = numbers.pop();
          char result2 = operators.pop();
          
            switch (result2) {
              case '+':
              return first + second;
              case '*':
              return first * second;
            }
            
          return 0;
      }
      
      public static int pemdas(char tempchar){
        
          switch (tempchar){
              case '+':
              return 1;
              case '*':
              return 2;
              
          }
          
      return -1;
      
      }
      
}
