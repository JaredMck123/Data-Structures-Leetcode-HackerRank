import java.util.ArrayList;

class MinHeap {
  private ArrayList<Integer> data;

  public MinHeap() {
    data = new ArrayList<>();
  }

  private int getParent(int index) { 
    return (index - 1) / 2; 
  }
  
  private int getLeftChild(int index) { 
    return index * 2 + 1; 
  } 

  private int getRightChild(int index) { 
    return index * 2 + 2;  
  } 

  private void swap(int indexA, int indexB) {
    int temp = data.get(indexA);
    data.set(indexA, data.get(indexB));
    data.set(indexB, temp);
  }

  public void print() {
    System.out.println(data.toString());
  }

  int getMin() throws Exception {
    if (data.size() > 0) {
      return data.get(0);
    }
    throw new Exception ("Heap is empty!");
  }

  void insert(int val) {
    data.add(val);
    int currentIndex = data.size() - 1;
    while (data.get(currentIndex) < data.get(getParent(currentIndex))) {
      swap(currentIndex, getParent(currentIndex));
      currentIndex = getParent(currentIndex);
    }
  }

  // Remove AND return min element
  public int extractMin() {
    int min = data.get(0);
    swap(0, data.size() - 1);
    data.remove(data.size() - 1);
    minHeapify(0);
    return min;
  }

  void minHeapify(int index) {
    // If it's a leaf - return
    if (getLeftChild(index) >= data.size()) {
      return;
    } 
    // If there's only a left child
    if (getRightChild(index) >= data.size()) {
      if (data.get(index) > data.get(getLeftChild(index))) {
        swap(index, getLeftChild(index));
        return;
      }
    }
    // If there's two children, check if parent bigger than either child
    else if (data.get(index) > data.get(getLeftChild(index)) ||
      data.get(index) > data.get(getRightChild(index))
    ) {
      if (data.get(getLeftChild(index)) < data.get(getRightChild(index))) {
        swap(index, getLeftChild(index));
        minHeapify(getLeftChild(index));
      } else {
        swap(index, getRightChild(index));
        minHeapify(getRightChild(index));
      }
    }
  }

}

////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////

public class MyHeap {
    private int[] elements;
    public int length;

    /**
     * Constructs a heap from an unsorted array
     */
    public MyHeap(int[] elements) {
        // set the underlying elements
        this.elements = elements;
        this.length = elements.length;

        // organize the elements in heap fashion
        for (int i = (int) Math.floor(elements.length/2) - 1; i >= 0; i--) {
            minHeapify(i);
        }
    }

    /**
     * Inserts an element into the heap
     */
    public void insert(int element) {
        // insert our element at the end
        length++;
        elements[length-1] = element;

        // iteratively swap to maintain heap order
        int currentNode = length-1;
        while (currentNode != 0 && elements[currentNode] < elements[(currentNode-1)/2]) {
            int tmp = elements[currentNode];
            elements[currentNode] = elements[(currentNode-1)/2];
            elements[(currentNode-1)/2] = tmp;

            currentNode = (currentNode-1)/2;
        }
    }

    /**
     * Removes and returns the minimum element of the heap
     */
    public int extractMin() {
        int min = elements[0];

        elements[0] = elements[length-1];
        length--;

        minHeapify(0);

        return min;
    }

    /**
     * Given an index representing a root of a subtree whose left and
     * right subtrees are both min-heaps, turns this subtree into a
     * min-heap.
     */
    private void minHeapify(int rootIndex) {
        int leftChild = rootIndex*2+1;
        int rightChild = rootIndex*2+2;

        // Find the smallest of the three
        int smallest = rootIndex;
        if (leftChild < length && elements[leftChild] < elements[rootIndex]) {
            smallest = leftChild;
        }
        if (rightChild < length && elements[rightChild] < elements[smallest]) {
            smallest = rightChild;
        }

        // Recursively max-heapify as needed
        if (smallest != rootIndex) {
            // swap smallest and root index
            int temp = elements[smallest];
            elements[smallest] = elements[rootIndex];
            elements[rootIndex] = temp;

            // call min heapify on the appropriate subtree
            minHeapify(smallest);
        }
    }
}
