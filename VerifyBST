/*
  * THIS WAS A HOMEWORK ASSIGNMENT.
  * INSTRUCTIONS ARE AS FOLLOWED:
  
  In this problem, you will be given a binary tree represented as an array.  Your job will be to verify 
  if it is a binary search tree or not. Input will be given as a space-separated array representing a binary 
  tree as we discussed in class, with the root node occupying the 0th index, the root nodeâ€™s children occupying 
  indices 1 and 2, their children occupying indices 3-6, etc.  All trees will be balanced, and will be filled left 
  to right in the bottom layer. 
  
  Restrictions:
  Your algorithm must run in time O(n), where n is the number of nodes in the graph.  Any algorithm that does not
  will be docked points for correctness as well as design.  In addition, any algorithm that returns true on all possible 
  inputs or false on all possible inputs will receive a grade of 0.

*/

import java.util.*;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        
        // parse the array representing the binary search tree
        int[] binaryTree;
        String input = sc.nextLine();
        if (input.equals("")) {
            binaryTree = new int[0];
        } else {    
            String[] binaryTreeStrings = input.split(" ");
            binaryTree = new int[binaryTreeStrings.length];
            for (int i = 0; i < binaryTreeStrings.length; i++) {
                binaryTree[i] = Integer.parseInt(binaryTreeStrings[i]);
            }
        }

        // check if this is a binary search tree; print the result
        System.out.println(isBinarySearchTree(binaryTree));
    }
    
    public static boolean isBinarySearchTree(int[] binaryTree) {
     
        int root = 0;
        int lesser = 1;
        int greater = 2;
        
       
       do{
         
         if(binaryTree.length == 1){
           return true;
         }
         else if(binaryTree[root] < binaryTree[lesser]){
            return false;
         }
          else if(binaryTree[root] > binaryTree[greater]){
            return false;
          }
            else if(binaryTree[greater] > binaryTree[root] && binaryTree[root] < binaryTree[0] && binaryTree[greater] > binaryTree[0]){
              return false;
            }
           
        root++;
        lesser += 2;
        greater += 2;  
       }
       
    while(lesser < binaryTree.length-1);
    
    return true;
}
}
